/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as HistoryImport } from './routes/history'
import { Route as IndexImport } from './routes/index'
import { Route as UserCartImport } from './routes/user/cart'
import { Route as ProductUploadImport } from './routes/product/upload'
import { Route as ProductProductIdImport } from './routes/product/$productId'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HistoryRoute = HistoryImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserCartRoute = UserCartImport.update({
  id: '/user/cart',
  path: '/user/cart',
  getParentRoute: () => rootRoute,
} as any)

const ProductUploadRoute = ProductUploadImport.update({
  id: '/product/upload',
  path: '/product/upload',
  getParentRoute: () => rootRoute,
} as any)

const ProductProductIdRoute = ProductProductIdImport.update({
  id: '/product/$productId',
  path: '/product/$productId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/history': {
      id: '/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/product/$productId': {
      id: '/product/$productId'
      path: '/product/$productId'
      fullPath: '/product/$productId'
      preLoaderRoute: typeof ProductProductIdImport
      parentRoute: typeof rootRoute
    }
    '/product/upload': {
      id: '/product/upload'
      path: '/product/upload'
      fullPath: '/product/upload'
      preLoaderRoute: typeof ProductUploadImport
      parentRoute: typeof rootRoute
    }
    '/user/cart': {
      id: '/user/cart'
      path: '/user/cart'
      fullPath: '/user/cart'
      preLoaderRoute: typeof UserCartImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/history': typeof HistoryRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/product/upload': typeof ProductUploadRoute
  '/user/cart': typeof UserCartRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/history': typeof HistoryRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/product/upload': typeof ProductUploadRoute
  '/user/cart': typeof UserCartRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/history': typeof HistoryRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/product/upload': typeof ProductUploadRoute
  '/user/cart': typeof UserCartRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/history'
    | '/login'
    | '/register'
    | '/product/$productId'
    | '/product/upload'
    | '/user/cart'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/history'
    | '/login'
    | '/register'
    | '/product/$productId'
    | '/product/upload'
    | '/user/cart'
  id:
    | '__root__'
    | '/'
    | '/history'
    | '/login'
    | '/register'
    | '/product/$productId'
    | '/product/upload'
    | '/user/cart'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HistoryRoute: typeof HistoryRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  ProductProductIdRoute: typeof ProductProductIdRoute
  ProductUploadRoute: typeof ProductUploadRoute
  UserCartRoute: typeof UserCartRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HistoryRoute: HistoryRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ProductProductIdRoute: ProductProductIdRoute,
  ProductUploadRoute: ProductUploadRoute,
  UserCartRoute: UserCartRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/history",
        "/login",
        "/register",
        "/product/$productId",
        "/product/upload",
        "/user/cart"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/history": {
      "filePath": "history.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/product/$productId": {
      "filePath": "product/$productId.tsx"
    },
    "/product/upload": {
      "filePath": "product/upload.tsx"
    },
    "/user/cart": {
      "filePath": "user/cart.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
